package tamagoshi.jeu;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JToolBar;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import tamagoshi.graphic.TamaJPanel;
import tamagoshi.jeu.actions.ActionExit;
import tamagoshi.jeu.actions.ActionPlay;
import tamagoshi.jeu.actions.ActionScore;
import tamagoshi.properties.TamaConfiguration;

public class TamaHomeGraphic extends JFrame{
	
	private AbstractAction actionPlay,actionExit,actionScore;
	private JSpinner spinDifficulty;
	private boolean difficultyFixed;
	private boolean autoGeneratedNames;
	private TamaConfiguration config;
	
	public TamaHomeGraphic() {
		this.config = TamaConfiguration.getInstance();
		
		this.autoGeneratedNames = config.getAutoGeneratedNamesSelection();
		this.difficultyFixed = config.getDifficultyFixed();
		
		JMenuBar menuBar = new JMenuBar();
		
		setUpActions();
		
		JMenu menuFile = new JMenu("Fichier");
		
		JMenuItem itemPlay = new JMenuItem(actionPlay);
		JMenuItem itemExit = new JMenuItem(actionExit);

		menuFile.add(itemPlay);
		menuFile.add(itemExit);
		
		JMenu menuConfig = new JMenu("Configuration");
		
		ButtonGroup groupConfigName = new ButtonGroup();
		
		JRadioButtonMenuItem namesAutoRadio = new JRadioButtonMenuItem("Génération des noms automatique");
		namesAutoRadio.setSelected(this.namesAreAutoGenerated());
		namesAutoRadio.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				changeNameSelectionMethod(true);
			}
		});
		
		JRadioButtonMenuItem namesToDefineRadio = new JRadioButtonMenuItem("Choisir les noms au lancement");
		namesToDefineRadio.setSelected(!this.autoGeneratedNames);
		namesToDefineRadio.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				changeNameSelectionMethod(false);
			}
		});
		
		groupConfigName.add(namesAutoRadio);
		groupConfigName.add(namesToDefineRadio);
		
		menuConfig.add(namesAutoRadio);
		menuConfig.add(namesToDefineRadio);
		
		menuConfig.addSeparator();
		
		ButtonGroup groupConfigDifficulty = new ButtonGroup();
		
		JRadioButtonMenuItem difficultyFixed = new JRadioButtonMenuItem("Difficulté fixée");
		difficultyFixed.setSelected(this.difficultyFixed);
		difficultyFixed.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				enableDifficultyFixed();	
			}
		});
		
		JRadioButtonMenuItem difficultyFree = new JRadioButtonMenuItem("Difficulté définie au lancement");
		difficultyFree.setSelected(!this.difficultyFixed);
		difficultyFree.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				enableDifficultyFree();	
			}
		});
		
		groupConfigDifficulty.add(difficultyFixed);
		groupConfigDifficulty.add(difficultyFree);
		
		menuConfig.add(difficultyFixed);
		menuConfig.add(difficultyFree);
		
		JMenu menuInformations = new JMenu("Informations");
		
		JMenuItem itemGameInfos = new JMenuItem("Règles du jeu");
		JMenuItem itemScore = new JMenuItem(actionScore);
		JMenuItem itemAboutTeam = new JMenuItem("A propos du créateur");
		
		menuInformations.add(itemGameInfos);
		menuInformations.add(itemScore);
		menuInformations.add(itemAboutTeam);
		
		menuBar.add(menuFile);
		menuBar.add(menuConfig);
		menuBar.add(menuInformations);
		
		setJMenuBar(menuBar);
		
		//Toolbar
		
		JToolBar toolBar = new JToolBar();
		toolBar.setFloatable(false);
		
		JPanel panelDifficulty = new JPanel(new FlowLayout());
		
		JLabel labelDifficulty = new JLabel("Définir la difficulté");
		panelDifficulty.add(labelDifficulty);
		
		SpinnerModel modelDifficulty = new SpinnerNumberModel(1,1,10,1);
		spinDifficulty = new JSpinner(modelDifficulty);
		spinDifficulty.setValue(config.getDifficulty());
		spinDifficulty.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent arg0) {
				config.setDifficulty((int) spinDifficulty.getValue());
			}	
		});
		
		//Desactivation edition par clavier sur le spinner
		JFormattedTextField tf = ((JSpinner.DefaultEditor) spinDifficulty.getEditor()).getTextField();
		tf.setEditable(false);
		
		panelDifficulty.add(spinDifficulty);
		
		toolBar.add(panelDifficulty);
		
		if(!this.difficultyFixed) {
			this.enableDifficultyFree();
		}
		
		add(toolBar,BorderLayout.PAGE_START);
		
		//Image Tamagoshi
		add(new TamaHomeImage(),BorderLayout.CENTER);
		
		//Boutons
		JPanel butonsPanel = new JPanel(new FlowLayout());
		
		JButton buttonPlay = new JButton(actionPlay);
		JButton buttonScore = new JButton(actionScore);
		JButton buttonExit = new JButton(actionExit);
		
		butonsPanel.add(buttonPlay);
		butonsPanel.add(buttonScore);
		butonsPanel.add(buttonExit);
		
		add(butonsPanel,BorderLayout.SOUTH);
		
		//Opération de fermeture
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				config.storeProperties();
				System.exit(1);
			}
		});
		
	}
	
	
	private void setUpActions() {
		this.actionPlay = new ActionPlay("Jouer",this);
		this.actionExit = new ActionExit("Quitter");
		this.actionScore = new ActionScore("Score");
	}
	
	private void enableDifficultyFree() {
		this.difficultyFixed = false;
		this.spinDifficulty.setEnabled(false);
		config.setDifficultyFixed(false);
	}
	
	private void enableDifficultyFixed() {
		this.difficultyFixed = true;
		this.spinDifficulty.setEnabled(true);
		config.setDifficultyFixed(true);
	}
	
	private void changeNameSelectionMethod(boolean autoGenerated) {
		this.autoGeneratedNames = autoGenerated;
		config.setAutoGeneratedNamesSelection(autoGenerated);
	}
	
	public boolean namesAreAutoGenerated() {
		return this.autoGeneratedNames;
	}
	
	public boolean difficultyIsFixed() {
		return this.difficultyFixed;
	}
	
	public int getDifficulty() {
		return (int) this.spinDifficulty.getValue();
	}
	
	public static void main(String[]args) {
		TamaHomeGraphic home = new TamaHomeGraphic();
		home.setTitle("Jeu des tamagoshis");
		home.setSize(400, 400);
		home.setLocationRelativeTo(null);
		home.setResizable(false);
		home.setVisible(true);
	}

}
