package tamagoshi.jeu;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import tamagoshi.audio.AudioPlayer;
import tamagoshi.graphic.TamaJPanel;
import tamagoshi.jeu.actions.ActionExit;
import tamagoshi.jeu.actions.ActionHelp;
import tamagoshi.jeu.actions.ActionPlay;
import tamagoshi.jeu.actions.ActionScore;
import tamagoshi.language.LanguageAccessor;
import tamagoshi.language.LanguageObserver;
import tamagoshi.properties.TamaConfiguration;

public class TamaHomeGraphic extends JFrame implements LanguageObserver{
	
	private AbstractAction actionPlay,actionExit,actionScore;
	private JSpinner spinDifficulty;
	private boolean difficultyFixed;
	private boolean autoGeneratedNames;
	private TamaConfiguration config;
	private ResourceBundle language;
	private JMenu menuFile;
	private JMenu menuConfig;
	private JRadioButtonMenuItem namesToDefineRadio;
	private JRadioButtonMenuItem difficultyFixedRadio;
	private JRadioButtonMenuItem difficultyFree;
	private JMenu menuInformations;
	private JMenuItem itemGameInfos;
	private JMenuItem itemScore;
	private JMenuItem itemAboutTeam;
	private JLabel labelDifficulty;
	private JRadioButtonMenuItem namesAutoRadio;
	
	public TamaHomeGraphic() {
		this.config = TamaConfiguration.getInstance();
		
		this.autoGeneratedNames = config.getAutoGeneratedNamesSelection();
		this.difficultyFixed = config.getDifficultyFixed();
		
		
		JMenuBar menuBar = new JMenuBar();
		
		setUpActions();
		
		menuFile = new JMenu();
		menuFile.setMnemonic(KeyEvent.VK_F);
		
		JMenuItem itemPlay = new JMenuItem(actionPlay);
		JMenuItem itemExit = new JMenuItem(actionExit);

		menuFile.add(itemPlay);
		menuFile.add(itemExit);
		
		menuConfig = new JMenu();
		menuConfig.setMnemonic(KeyEvent.VK_C);
		
		ButtonGroup groupConfigName = new ButtonGroup();
		
		namesAutoRadio = new JRadioButtonMenuItem();
		namesAutoRadio.setSelected(this.namesAreAutoGenerated());
		namesAutoRadio.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				changeNameSelectionMethod(true);
			}
		});
		
		namesToDefineRadio = new JRadioButtonMenuItem();
		namesToDefineRadio.setSelected(!this.autoGeneratedNames);
		namesToDefineRadio.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				changeNameSelectionMethod(false);
			}
		});
		
		groupConfigName.add(namesAutoRadio);
		groupConfigName.add(namesToDefineRadio);
		
		menuConfig.add(namesAutoRadio);
		menuConfig.add(namesToDefineRadio);
		
		menuConfig.addSeparator();
		
		ButtonGroup groupConfigDifficulty = new ButtonGroup();
		
		difficultyFixedRadio = new JRadioButtonMenuItem();
		difficultyFixedRadio.setSelected(this.difficultyFixed);
		difficultyFixedRadio.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				enableDifficultyFixed();	
			}
		});
		
		difficultyFree = new JRadioButtonMenuItem();
		difficultyFree.setSelected(!this.difficultyFixed);
		difficultyFree.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				enableDifficultyFree();	
			}
		});
		
		groupConfigDifficulty.add(difficultyFixedRadio);
		groupConfigDifficulty.add(difficultyFree);
		
		menuConfig.add(difficultyFixedRadio);
		menuConfig.add(difficultyFree);
		
		menuInformations = new JMenu();
		menuInformations.setMnemonic(KeyEvent.VK_I);
		
		itemGameInfos = new JMenuItem(new ActionHelp());
		
		itemScore = new JMenuItem(actionScore);
		
		itemAboutTeam = new JMenuItem();
		itemAboutTeam.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I,InputEvent.CTRL_MASK));
		itemAboutTeam.setMnemonic(KeyEvent.VK_I);
		itemAboutTeam.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				TamaAbout aboutFrame = new TamaAbout();
				aboutFrame.setLocationRelativeTo(null);
				aboutFrame.setSize(500,130);
				aboutFrame.setVisible(true);
			}});
		
		menuInformations.add(itemGameInfos);
		menuInformations.add(itemScore);
		menuInformations.add(itemAboutTeam);
		
		TamagoshiLanguageMenu menuLanguage = new TamagoshiLanguageMenu();
		menuLanguage.setMnemonic(KeyEvent.VK_L);
		
		menuBar.add(menuFile);
		menuBar.add(menuConfig);
		menuBar.add(menuInformations);
		menuBar.add(menuLanguage);
		
		setJMenuBar(menuBar);
		
		//Toolbar
		
		JToolBar toolBar = new JToolBar();
		toolBar.setFloatable(false);
		
		JPanel panelDifficulty = new JPanel(new FlowLayout());
		
		labelDifficulty = new JLabel();
		panelDifficulty.add(labelDifficulty);
		
		SpinnerModel modelDifficulty = new SpinnerNumberModel(1,1,10,1);
		spinDifficulty = new JSpinner(modelDifficulty);
		spinDifficulty.setValue(config.getDifficulty());
		spinDifficulty.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent arg0) {
				config.setDifficulty((int) spinDifficulty.getValue());
			}	
		});
		
		//Desactivation edition par clavier sur le spinner
		JFormattedTextField tf = ((JSpinner.DefaultEditor) spinDifficulty.getEditor()).getTextField();
		tf.setEditable(false);
		
		panelDifficulty.add(spinDifficulty);
		
		toolBar.add(panelDifficulty);
		
		if(!this.difficultyFixed) {
			this.enableDifficultyFree();
		}
		
		add(toolBar,BorderLayout.PAGE_START);
		
		//Image Tamagoshi
		add(new TamaHomeImage(),BorderLayout.CENTER);
		
		//Boutons
		JPanel butonsPanel = new JPanel(new FlowLayout());
		
		JButton buttonPlay = new JButton(actionPlay);
		JButton buttonScore = new JButton(actionScore);
		JButton buttonExit = new JButton(actionExit);
		
		butonsPanel.add(buttonPlay);
		butonsPanel.add(buttonScore);
		butonsPanel.add(buttonExit);
		
		add(butonsPanel,BorderLayout.SOUTH);
		
		//Op√©ration de fermeture
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				config.storeProperties();
				System.exit(1);
			}
		});
		
		//Language
		LanguageAccessor accessor = LanguageAccessor.getInstance();
		accessor.addObservator(this);
		
		
		//Audio
		AudioPlayer audio = AudioPlayer.getInstance();
		audio.playBackgroundMusic("fileCityDay");
		
	}


	private void setUpActions() {
		this.actionPlay = new ActionPlay(this);
		this.actionExit = new ActionExit();
		this.actionScore = new ActionScore();
	}
	
	private void enableDifficultyFree() {
		this.difficultyFixed = false;
		this.spinDifficulty.setEnabled(false);
		config.setDifficultyFixed(false);
	}
	
	private void enableDifficultyFixed() {
		this.difficultyFixed = true;
		this.spinDifficulty.setEnabled(true);
		config.setDifficultyFixed(true);
	}
	
	private void changeNameSelectionMethod(boolean autoGenerated) {
		this.autoGeneratedNames = autoGenerated;
		config.setAutoGeneratedNamesSelection(autoGenerated);
	}
	
	public boolean namesAreAutoGenerated() {
		return this.autoGeneratedNames;
	}
	
	public boolean difficultyIsFixed() {
		return this.difficultyFixed;
	}
	
	public int getDifficulty() {
		return (int) this.spinDifficulty.getValue();
	}
	
	public static void main(String[]args) {
		TamaHomeGraphic home = new TamaHomeGraphic();
		home.setSize(400, 400);
		home.setLocationRelativeTo(null);
		home.setResizable(false);
		home.setVisible(true);
	}


	@Override
	public void languageUpdate(LanguageAccessor languageAcc) {
		this.language = languageAcc.getBundle("Home");
		this.menuFile.setText(language.getString("file"));
		this.menuConfig.setText(language.getString("config"));
		this.namesAutoRadio.setText(language.getString("autoGeneration"));
		this.namesToDefineRadio.setText(language.getString("chooseNames"));
		this.difficultyFixedRadio.setText(language.getString("fixedDifficulty"));
		this.difficultyFree.setText(language.getString("notFixedDifficulty"));
		this.menuInformations.setText(language.getString("infos"));
		this.itemAboutTeam.setText(language.getString("about"));
		this.setTitle(language.getString("tamaGame"));
		this.labelDifficulty.setText(language.getString("setUpDifficulty"));
	}

}
