package tamagoshi.properties;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Properties;

public class TamaConfiguration {

	private Properties configuration;
	private String location = "tamaGame.properties";
	private static TamaConfiguration intsance;
	
	public static TamaConfiguration getInstance() {
		if(TamaConfiguration.intsance == null) {
			TamaConfiguration.intsance = new TamaConfiguration();
		}
		return TamaConfiguration.intsance;
	}
	
	private TamaConfiguration() {
		this.configuration=new Properties();
		if(existPropertyFiles()) {
			loadProperties();
		}
	}
	
	public void setDifficulty(int difficulty) {
		int realValue = (difficulty>=1 && difficulty<=10) ? difficulty : 1;
		this.setProperty("difficulty", Integer.toString(realValue));
	}
	
	public int getDifficulty() {
		try {
			String difficulty = this.getProperty("difficulty");
			if(difficulty != null) {
				int difficultyValue = Integer.parseInt(difficulty);
				if(difficultyValue>=1 && difficultyValue<=10) {
					return difficultyValue;
				}
			}
		}
		catch(NumberFormatException e) {
			return 1;
		}
		return 1;
	}
	
	public void setAutoGeneratedNamesSelection(boolean value) {
		this.setProperty("nameSelectionByUser", Boolean.toString(value));
	}
	
	public boolean getAutoGeneratedNamesSelection() {
		return !getFreeNamesSelection();
	}
	
	private boolean getFreeNamesSelection() {
		String value = this.getProperty("nameSelectionByUser");
		if(value != null) {
			return Boolean.parseBoolean(value);
		}
		return false; 
	}
	
	public void setDifficultyFixed(boolean value) {
		this.setProperty("difficultySelectAtLaunch", Boolean.toString(value));
	}
	
	public boolean getDifficultyFixed() {
		return !getDifficultySelectAtLaunch();
	}
	
	private boolean getDifficultySelectAtLaunch() {
		String value = this.getProperty("difficultySelectAtLaunch");
		if(value != null) {
			return Boolean.parseBoolean(value);
		}
		return false; 
	}
	
	public String[] getAutoGeneratedNames() {
		String lineName = this.getProperty("autoNames");
		if(lineName!=null) {
			return lineName.split(",");
		}
		else {
			String[]defaultList = {"Tamagoshi"};
			return defaultList;
		}
	}
	
	public double[] getScores(int difficulty) {
		double[] scores = new double[3];
		String[] scoresString;
		String lineValue = this.getProperty("scoreNiv"+difficulty);
		if(lineValue!=null) {
			int indexScore = 0;
			scoresString = lineValue.split(",");
			for(String score : scoresString) {
				scores[indexScore]=(Double.parseDouble(score));
				indexScore++;
			}
		}
		return scores;
	}
	
	public boolean saveScore(int difficulty,double score) {
		double[]scoreForDifficulty = getScores(difficulty);
		String lineScore="";
		boolean registered = false;
		for(double highscore : scoreForDifficulty) {
			if(!registered && (score>highscore)) {
				lineScore+=","+score;
				registered=true;
			}
			else {
				lineScore+=","+highscore;
			}
		}
		lineScore = lineScore.replaceFirst(",", "");
		setProperty("scoreNiv"+difficulty, lineScore);
		return registered;
	}
	
	private String getProperty(String key) {
		if(existProperty(key)) {
			return configuration.getProperty(key);
		}
		return null;
	}
	
	private void setProperty(String key,String value) {
		configuration.setProperty(key, value);
	}
	
	public boolean storeProperties() {
		try {
			OutputStream out = new FileOutputStream(location);
			configuration.store(out, "Fichier des propriétés du jeu des tamagoshis");
		} catch (FileNotFoundException e) {
			return false;
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	
	private boolean loadProperties() {
		try {
			InputStream in = new FileInputStream(location);
			configuration.load(in);
		} catch (FileNotFoundException e) {
			return false;
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	
	private boolean existPropertyFiles() {
		File propFile = new File(location);
		return propFile.exists();
	}
	
	private boolean existProperty(String key) {
		return configuration.getProperty(key)!=null;
	}
	
}
